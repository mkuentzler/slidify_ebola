pbinom(2, size=4, prob=.5, lower.tail=F)
base <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
?t.test
t.test(base, week2, paired=T)$p.value
t.test(base, week2, paired=True, alternative=two.sided)$p.value
t.test(base, week2, paired=True, alternative='two.sided')$p.value
t.test(base, week2, paired=T, alternative='two.sided')$p.value
?z.test
?pnorm
?p,test
?p.test
spool <- sqrt((287 * 12^2 + 287 * 12^2) / (287+287))
deltamu <- 44 - 42.04
?qnorm
deltamu / sqrt(spool^2/288)
qnorm(2.771859)
pnorm(2.7718)
sdiff <- sqrt(12^2 * (1/288 + 1/288))
pnorm(1.96)
1-pnorm(1.96)
2*(1-pnorm(1.96))
pnorm(1.96, lower.tail=F)
2*pnorm(1.96, lower.tail=F)
?t.test
sp <- sqrt( (8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2) )
- 3 - 1 + c(-1, 1) * qt(.95, 16) * sp * (1/9 + 1/9)^.5
c(-1, 1) * qt(.95, 16) * sp * (1/9 + 1/9)^.5
c(-1, 1) * qt(.975, 16) * sp * (1/9 + 1/9)^.5
c(-1, 1) * qt(.99, 16) * sp * (1/9 + 1/9)^.5
c(-1, 1) * qt(.995, 16) * sp * (1/9 + 1/9)^.5
- 3 - 1 + c(-1, 1) * qt(.995, 16) * sp * (1/9 + 1/9)^.5
q()
?t.test
?qt
qt(.95)
qt(.95, 8)
1100 + c(-1,1) * qt(.95, 8) * 30
1100 + c(-1,1) * qt(.95, 8) * 30/sqrt(8)
?ppois
ppois(9, .01 * 1787)
ppois(17.98, .01 * 1787)
ppois(17.87, .01 * 1787)
ppois(10, .01 * 1787)
ppois(9, .01 * 1787, lower.tail=F)
?rnorm
qnorm(.5)
qnorm(.95, mean=12, sd=4)
qnorm(.95, mean=12, sd=4/99)
qnorm(.95, mean=12, sd=4/sqrt(99)
)
qnorm(.95, mean=12, sd=4/sqrt(99))
qnorm(.95, mean=-.01, sd=.04/sqrt(99))
qnorm(.95, mean=-.01, sd=.04/sqrt(99))
pnorm(.95, mean=-.01, sd=.04/sqrt(99))
qnorm(.95)
.01/(.04/sqrt(100))
pnorm(-2.5, lower.tail=F)
q()
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
cars
mpg
head(mpg)
summary(mpg)
plot(mpg)
?plot
qplot(year, hwy, data = mpg)
qplot(cyl, hwy, data = mpg)
install.packages("ggplot2")
library(ggplot2)
qplot(carat, price, data = diamonds)
qplot(diamonds$cut, diamonds$carat)
qplot(carat, data = diamonds,
geom="histogram")
qplot(carat, data = diamonds,
geom="histogram", binwidth = 1)
qplot(carat, data = diamonds,
geom="histogram", binwidth = 0.1)
qplot(carat, data = diamonds,
geom="histogram", binwidth = 0.01)
# using ggplot() -------------------------------------------------------------
d <- ggplot(diamonds, aes(x=carat, y=price))
d + geom_point()
d + geom_point(aes(colour = carat))
d + geom_point(aes(colour = carat)) + scale_colour_brewer()
ggplot(diamonds) + geom_histogram(aes(x=price))
# Separation of statistcs and geometric elements -----------------------------
p <- ggplot(diamonds, aes(x=price))
p + geom_histogram()
p + stat_bin(geom="area")
p + stat_bin(geom="point")
p + stat_bin(geom="line")
p + geom_histogram(aes(fill = clarity))
p + geom_histogram(aes(y = ..density..))
# Setting vs mapping ---------------------------------------------------------
p <- ggplot(diamonds, aes(x=carat,y=price))
# What will this do?
q()
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child, col='blue', breaks=100)
hist(galton$parent, col='blue', breaks=100)
head(galton)
x <- c(.18, -1.54, .42, .95)
w <- c(2, 1, 3, 1)
x * w
sum(x * w) / sum(w)
par(mfrow=c(1,1))
plot(galton$parent, galton$child)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
avg(x/y)
average(x/y)
plot(x, y)
?lm
y/x
len(y/x)
length(y/x)
sum(y/x)/length(y/x)
?lm
lm(I(child - mean(child) ~ I(parent - mean(parent)) - 1, data = galton))
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data=galton))
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data=galton)
lm(y ~ x, offset = 0)
lm(y ~ x)
lm(y ~ 0 + x)
data(mtcars)
lm(mpg ~ weight, data=mtcars)
mtcars$weight
head(mtcars)
?mtcars
lm(mpg ~ wt, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
x - mean(x)
var(x)
(x - mean(x))/var(x)
var((x - mean(x))/var(x))
var((x - mean(x))/var(x)^2)
var((x - mean(x))/sd(x))
(x - mean(x))/sd(x)
mean((x - mean(x))/sd(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
q()
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
ablinte(regrline, lwd=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
getwd()
setwd('/Users/Moritz/github')
getwd()
swirl()
regrline <- lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
play
play()
est(ols.ic, ols.slope)
nxt()
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
q()
?InsectSprays
?glm
?InsectSprays
fit <- glm(count ~ spray, data = InsectSprays)
summary(fit)
?glm
fit <- glm(count ~ spray, family = poisson, data = InsectSprays)
summary(fit)
fit$coef
fit$coef[0]
fit$coef$(Intercept)
fit$coef$sprayB
type(fit$coef)
str(fit$coef)
fit$coef[1]
fit$coef[1] / (fit$coef[1] + fit$coef[2])
exp(fit$coef[1] / (fit$coef[1] + fit$coef[2]))
plot(InsectSprays)
hist(InsectSprays)
?hist
hist(InsectSprays$count)
fit <- glm(count ~ factor(spray), family = poisson, data = InsectSprays)
summary(fit)
fit <- glm(count ~ spray, family = poisson, data = InsectSprays)
summary(fit)
exp(-fit$coef[2])
q()
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
?glm
knot <- c(0)
spline <- (x>0) * x
spline
xMat <- cbind(1, x, spline)
yhat <- predict (lm( y ~ xMat -1))
plot(x, y, pch=21)
lines(x, yhat)
lm(y ~ xMat - 1)
lm(y ~ xMat - 1)[1]
lm(y ~ xMat - 1)[1, 1]
fit <- lm(y ~ xMat - 1)
fit$coef[2]
fit$coef[2] + fit$coef[3]
xMat
q()
install.packages("caret")
library(caret); library(kernlab)
install.packages("kernlab")
library(caret); library(kernlab)
data(spam)
head(spam)
inTrain <- createDataPartition(y=spam$type, p=.75, list=FALSE)
head(inTrain)
tail(inTrain)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
install.packages('e1071')
modelFit <- train(type ~., data=training, method="glm")
modelFit
predictions <- predict(modelFit, testing$type)
predictions <- predict(modelFit, newdata=testing)
head(predictions)
confusionMatrix(predictions, testing$type)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?cut2
plot(concrete$outcome)
head(concrete)
?index
points(concrete$CompressiveStrength)
plot(1:1030, concrete$CompressiveStrength)
levels(concrete$Cement)
summary(concrete)
?cut2
cut2(concrete$Cement)
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$Cement))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$FlyAsh))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$Age))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$FlyAsh))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$Age))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$FlyAsh))
?cor
cor(concrete$CompressiveStrength, concrete$FlyAsh)
head(concrete)
cor(concrete$CompressiveStrength, concrete$Superplasticizer)
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$Superplasticizer))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$CoarseAggregate))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$FineAggregate))
plot(1:1030, concrete$CompressiveStrength, col = cut2(concrete$Age))
cor(concrete$CompressiveStrength, concrete$Age)
?hist
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
head(log(concrete$Superplasticizer))
plot(1:1030, training$CompressiveStrength, col = cut2(training$Age))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age))
plot(1:774, training$CompressiveStrength, col = cut2(training$FlyAsh))
plot(1:774, training$CompressiveStrength, col = cut2(training$Superplasticizer))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age))
cor(training$CompressiveStrength, training$Age)
plot(1:774, training$CompressiveStrength, col = cut2(training$FlyAsh))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age))
hist(log(training$Superplasticizer))
?skew
?skewness
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, 4))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, 3))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, 5))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, 2))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, 10))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, 20))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age))
?cut2
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, g=2))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, g=3))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, g=5))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, g=4))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, g=3))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, m203))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, m=20))
plot(1:774, training$CompressiveStrength, col = cut2(training$FlyAsh, m=20))
plot(1:774, training$CompressiveStrength, col = cut2(training$Cement, m=20))
plot(1:774, training$CompressiveStrength, col = cut2(training$Age, m=20))
q()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colNames(training)
colnames(training)
colnames(training)[58:69]
head(training[,58:69])
trainingIL <- training[,58:69]
?preProcess
preObj <- preProcess(trainingIL, method = c("PCA"))
preObj <- preProcess(trainingIL, method = c("pca"))
summary(preObj)
M <- abs(cor(training[,-1]))
preObj <- preProcess(trainingIL, method = c("center", "scale", "pca"))
prc <- prComp(trainingIL)
prc <- prcomp(trainingIL)
head(prc)
preProc <- preProcess(trainingIL, method = c("pca"))
trainIlPc <- predict(preProc, trainingIL)
head(trainIlPc)
preProc
preProc <- preProcess(trainingIL, method = c("pca"), thresh = .9)
preProc
cls()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,57:70])
head(training[,58:69])
trainingIL <- cbind(training[,1], training[,58:69])
head(trainingIL)
colnames(training)
trainingIL <- cbind(training[,1], training$diagnosis)
head(trainingIL)
trainingIL <- cbind(training$diagnosis, training[,58:69])
head(trainingIL)
colnames(trainingIL)
colnames(trainingIL)[1]
colnames(trainingIL)[1] <- "diagnosis"
colnames(trainingIL)[1]
?train
fit1 <- train(diagnosis ~ ., method="glm", data="trainingIL")
fit1 <- train(diagnosis ~ ., method="glm", data=trainingIL)
summary(fit1)
fit1
fit1 <- train(trainingIL$diagnosis ~ ., method="glm", data=trainingIL)
fit1
fit1 <- train(trainingIL$diagnosis ~ ., method="glm", data=trainingIL)
fit1
?predict
pred1 <- predict(fit1, testing)
head(pred1)
?confusionMatrix
confusionMatrix(pred1, testing$diagnosis)
prepr <- preProcess(trainingIL[,-1], method="pca", thresh=.8)
trainingPca <- cbind(trainingIL$diagnosis, predict(prepr, trainingIL[, -1]))
fit2 <- train(trainingPca$diagnosis ~ ., method="glm", data=trainingPca)
colnames(trainingPca)[1] <- "diagnosis"
fit2 <- train(trainingPca$diagnosis ~ ., method="glm", data=trainingPca)
pred2 <- predict(fit2, testing)
pred2 <- predict(fit2, predict(prepr, testing))
pred2 <- predict(fit2, predict(prepr, testing[,-1]))
testingIL <- cbind(testing[,1], testing[,58:69])
pred2 <- predict(fit2, predict(prepr, testingIL))
pred2 <- predict(fit2, predict(prepr, testingIL[,-1]))
head(pred2)
confusionMatrix(pred2, testing$diagnosis)
q()
q()
q()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
q()
?p
p(1,2)
?column
?fluidRow
library(shiny)
?p
shiny::runApp('shiny_ebola/Ebola_App')
shiny::runApp('shiny_ebola/Ebola_App')
shiny::runApp('shiny_ebola/Ebola_App')
shiny::runApp('shiny_ebola/Ebola_App')
shiny::runApp('shiny_ebola/Ebola_App')
q()
getwd()
setwd("./")
getwd()
library(reshape2)
library(ggplot2)
# Read in the Ebola data
options(stringsAsFactors = FALSE)
ebola_data <- read.csv(file = './country_timeseries.csv', header = TRUE)
ebola_data$Date <- as.Date(ebola_data$Date, "%m/%d/%Y")
eb_liberia = subset(ebola_data,
select = c(Date, Cases_Liberia, Deaths_Liberia))
colnames(eb_liberia) <- c('Date', 'Cases', 'Deaths')
mort_liberia <- data.frame(eb_liberia$Date,
eb_liberia$Deaths / eb_liberia$Cases * 100)
colnames(mort_liberia) <- c('Date', 'Mortality')
ggplot(melt(mort_liberia, id = 'Date'),
aes(x = Date, y = value, colour = variable), na.rm=TRUE) +
geom_point() + stat_smooth() +
labs(x = "Date", y = "Ebola mortality [%] in Liberia")
library(reshape2)
library(ggplot2)
# Read in the Ebola data
options(stringsAsFactors = FALSE)
ebola_data <- read.csv(file = './country_timeseries.csv', header = TRUE)
ebola_data$Date <- as.Date(ebola_data$Date, "%m/%d/%Y")
eb_liberia = subset(ebola_data,
select = c(Date, Cases_Liberia, Deaths_Liberia))
colnames(eb_liberia) <- c('Date', 'Cases', 'Deaths')
mort_liberia <- data.frame(eb_liberia$Date,
eb_liberia$Deaths / eb_liberia$Cases * 100)
colnames(mort_liberia) <- c('Date', 'Mortality')
ggplot(melt(mort_liberia, id = 'Date'),
aes(x = Date, y = value, colour = variable), na.rm=TRUE) +
geom_point() + stat_smooth() +
labs(x = "Date", y = "Ebola mortality [%] in Liberia")
ebola_data <- read.csv(file = './country_timeseries.csv', header = TRUE)
setwd('./slidify_ebola/')
options(stringsAsFactors = FALSE)
ebola_data <- read.csv(file = './country_timeseries.csv', header = TRUE)
ebola_data$Date <- as.Date(ebola_data$Date, "%m/%d/%Y")
eb_liberia = subset(ebola_data,
select = c(Date, Cases_Liberia, Deaths_Liberia))
colnames(eb_liberia) <- c('Date', 'Cases', 'Deaths')
mort_liberia <- data.frame(eb_liberia$Date,
eb_liberia$Deaths / eb_liberia$Cases * 100)
colnames(mort_liberia) <- c('Date', 'Mortality')
plt <- ggplot(melt(mort_liberia, id = 'Date'),
aes(x = Date, y = value, colour = variable), na.rm=TRUE) +
geom_point() + stat_smooth() +
labs(x = "Date", y = "Ebola mortality [%] in Liberia")
suppressWarnings(print(plt))
plt <- ggplot(melt(mort_liberia, id = 'Date'),
aes(x = Date, y = value, colour = variable), na.rm=TRUE) +
geom_point() + stat_smooth(method = loess) +
labs(x = "Date", y = "Ebola mortality [%] in Liberia")
shiny::runApp('~/github/shiny_ebola/Ebola_App')
install.packages(shinyApp)
install_github("rstudio/shinyapps")
library(devtools)
install_github("rstudio/shinyapps")
shiny::runApp('~/github/shiny_ebola/Ebola_App')
q()
